import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../store'
import { getHuobiSymbols } from '../../apis'

export interface CounterState {
  value: Object
  status: 'idle' | 'loading' | 'failed'
}

const initialState: CounterState = {
  value: {},
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSymbols = createAsyncThunk(
  'symbols/getSymbols',
  async () => {
    const response = await getHuobiSymbols()
    return response.data
  }
)

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSymbols: (state, actions: PayloadAction<Object>) => {
      state.value = actions.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSymbols.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getSymbols.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value = action.payload
      })
  },
})

export const { setSymbols } = counterSlice.actions

export const selectSymbols = (state: AppState) => state.counter.value

export const incrementIfOdd =
  (amount: number): AppThunk =>
    (dispatch, getState) => {
      const currentValue = selectCount(getState())
      if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount))
      }
    }

export default counterSlice.reducer